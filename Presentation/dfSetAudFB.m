function [p, SSNw, SSNfs] = dfSetAudFB(expParam, dirs, p)
% [p, SSNw, SSNfs] = dfSetAudFB(expParam, dirs, p) sets the type of 
% auditory feedback (AF) to be used in experiments investigating 
% vocal-motor control using Audapter. 
% 
% This function updates the Audapter variable `p` and passes it back to be
% used by the other experimental scripts. In experiments requiring
% Speech-Shaped masking Noise (SSN), this function also generates the
% waveform to be played as masking noise during those experimental tasks. 
%
% Auditory feedback is set by checking the value of `expParam.AudFBSw`
% At the moment this scripts only creates experimental parameters for three
% Auditory feedback conditions. They are the following:
% `expParam.AudFBSw` = 0: NORMAL AUDITORY FEEDBACK OF SPOKEN VOICE (Default)
% `expParam.AudFBSw` = 1: PITCH-SHIFTED AUDITORY FEEDBACK OF SPOKEN VOICE
% `expParam.AudFBSw` = 2: SPEECH-SHAPED MASKING NOISE (NO SPOKEN VOICE)
%
% INPUTS
% expParam: Structure of experimental parameters. This structure is passed
% around to nearly all of the functions involved with the experimental
% setup and has full detail of the necessary parameters set for the
% experiments that are performed.
% dirs: Structure of the file directories set for the computer in use. 
% p: Structure of Audapter parameters generated by getAudapterDefaultParams
% and set when AudapterIO is initialized
% 
% OUTPUTS
% p: Structure of Audapter parameters generated by getAudapterDefaultParams
% and set when AudapterIO is initialized. This structure is updated in 
% this script and then passed back to the top-level function.
% SSNw: Vector of the Speech-Shaped Noise (SSN) waveform. In experiments 
% that require SSN this will generate a waveform to be played while
% Audapter is active. In experiments where it is not needed, it is an empty
% value.
% SSNfs: Integer value of the sampling frequency for the SSN waveform
% produced in experiments where this form of feedback is selected. When it
% is not selected it is an empty value.
%
% This function has the following subfunctions 
% (1) setLoudRatio
% (2) audapterGeneratedNoise
% (3) calcMaskLen
% (4) createSessionNoise
%
% Author: Dante J Smith
% Updated: 01/07/2022
  
dB           = expParam.headGain;  
gender       = expParam.gender; % Pull out
f0           = expParam.f0b;
p.dScale     = setLoudRatio(dB); % Scale of output from input
p.nDelay     = 7;

% Set target range of f0 for perturbations
bounds = identifyf0Bounds(f0, gender);
p.pitchLowerBoundHz = bounds(1); % Lower f0 bound
p.pitchUpperBoundHz = bounds(2); % Upper f0 bound

SSNw   = []; % Initalize the SSN waveform
SSNfs  = []; % Initalize the SSN samplig frequency

% NORMAL AUDITORY FEEDBACK OF SPOKEN VOICE
if  expParam.AudFBSw == 0
    p.fb                = 1; % Microphone FB
    p.bTimeDomainShift  = 0; % No pitch-shifting
    p.bCepsLift         = 0;
    
% PITCH-SHIFTED AUDITORY FEEDBACK OF SPOKEN VOICE
elseif expParam.AudFBSw == 1
    p.fb                = 1; % Microphone FB
    p.bTimeDomainShift  = 1; % Pitch-shifting
    p.bCepsLift         = 1;

% SPEECH-SHAPED MASKING NOISE (NO SPOKEN VOICE)
elseif expParam.AudFBSw == 2
    p.fb                = 0; % Audio File (Masking)
    p.bTimeDomainShift  = 0; % No pitch-shifting
    p.bCepsLift         = 0;
    
    % For this trial (or set of trials), how long do we need noise?
    noiseTime = calcMaskLen(expParam);
    
    % Generate a full length masking noise signal for the length we need
    [w, fs] = createSessionNoise(dirs, noiseTime);
    
%     [w, fs] = audapterGeneratedNoise(dirs, p);

    SSNw   = w;
    SSNfs  = fs;
else
    error('ERROR in dfSetAudFB: Inappropriate feedback method selected')
end 
end

function dScale = setLoudRatio(dB)
% dB should be a positive or negative decimal value of change in dB
% representing how much to scale the headphones against the input 
% microphone level.

dScale = 10^(dB/20);
end

function bounds = identifyf0Bounds(f0b, gender)
% bounds = identifyf0Bounds(f0b, gender) is a simple script to set the
% upper and lower bounds of fundamental frequency (f0) given a
% pariticipant based on their birth sex (gender in short form). This is the
% possible range that a given participant's f0 may fluctuate during a given
% experimental task. These bounds will be used to selectively tune the
% Audapter algorithms which perturb auditory feedback. The default bounds
% are set based on literature review and adjusted in cases of extreme
% variation in the recorded baseline fundamental frequency of the
% participant,
%
% INPUTS:
% f0b: Integer value of fundamental frequency of the participant recorded 
% during baseline assessments
% gender: String value of birth sex ('Male' or 'Female') recorded from 
% baseline assessments
%
% OUTPUTS:
% bounds: Vector of lower(1) and upper(2) limits of fundamental frequency
% (Hz) to be used for auditory feedback perturbations for the selected
% participant.

% Default fundamental frequency bounds identified from literature review
defaultMale   = [75 300];  % (Hz)
defaultFemale = [100 500]; % (Hz)

switch gender
    case 'male'
        if (f0b/2) < defaultMale(1) % Especially low-pitch Male
            bounds = [25 250]; % (Hz)
        else
            bounds = defaultMale;
        end
        
    case 'female'
        if (f0b*2) > defaultFemale(2) % Especially high-pitch Female
            bounds = [200 600]; % (Hz)
        else
            bounds = defaultFemale;
        end
end
end

function noiseTime = calcMaskLen(expParam)

numMaskRep = expParam.numMaskRep;

rdyTime  = expParam.rdyPause;  % Ready Message
cueTime  = expParam.cuePause;  % Cue period
buffTime = expParam.buffPause; % Buffer to begin phonating
trlTime  = expParam.trialLen;  % Phonation period
endTime  = expParam.endPause;  % Buffer to end phonating
resTime  = expParam.resPause;  % Rest/Feedback period

noiseTime = rdyTime + (cueTime + buffTime + trlTime + endTime + resTime + 0.3)*numMaskRep;
end

function [sessionNoise, fs] = createSessionNoise(dirs, noiseTime)

maskFile = fullfile(dirs.Prelim, 'SSN_ampChunk.wav');

[wavFile, fs] = audioread(maskFile);
wavLen   = length(wavFile);
noiseLen = round(noiseTime*fs);

rampUpSp = round(2*fs) + 1;
rampDnSt = round((noiseTime-2)*fs);

rampUpIdx = 1:rampUpSp;
rampUpL   = length(rampUpIdx);
rampDnIdx = rampDnSt:noiseLen;
rampDnL   = length(rampDnIdx);

rampUp = linspace(0, 1, rampUpL);
rampDn = linspace(1, 0, rampDnL);

numRep   = noiseLen/wavLen; % How many repetitions of the .wav file (decimal)
minInt   = floor(numRep);   % Min number of whole repeitions (integer)
noiseInt = repmat(wavFile', [1, minInt]);

remRep   = numRep - minInt; % How many decimal amounts left?
remIdx   = round(wavLen*remRep);
noiseRem = wavFile(1:remIdx)';

fullNoise = [noiseInt noiseRem];

rampFilt = ones(size(fullNoise));
rampFilt(rampUpIdx) = rampUp;
rampFilt(rampDnIdx) = rampDn;

sessionNoise = fullNoise.*rampFilt;
end

function [w, fs] = audapterGeneratedNoise(dirs, p)

% Uses Speech-Shaped Noise stored in util
noiseWavFN = fullfile(dirs.Prelim, 'SSN.wav'); 

maxPBSize  = Audapter('getMaxPBLen');

check_file(noiseWavFN);
[w, fs] = read_audio(noiseWavFN);

if fs ~= p.sr * p.downFact
    w = resample(w, p.sr * p.downFact, fs);              
end
if length(w) > maxPBSize
    w = w(1:maxPBSize);
end
Audapter('setParam', 'datapb', w, 1);
end
